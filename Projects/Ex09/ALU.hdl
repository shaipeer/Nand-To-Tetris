// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
		// if (zx==1) set x = 0        // 16-bit constant
		Mux16(a = x, b = false, sel = zx, out = zxout);			//--> out: zxout
		
		// if (nx==1) set x = ~x       // bitwise "not"
		Not16(in = zxout, out = notx);
		Mux16(a  = zxout, b   = notx, sel = nx, out = nxout);	//--> out: nxout
		
		// if (zy==1) set y = 0        // 16-bit constant
		Mux16(a = y, b = false, sel = zy, out = zyout);			//--> out: zyout
		
		// if (ny==1) set y = ~y       // bitwise "not"
		Not16(in = zyout, out = noty);
		Mux16(a  = zyout, b = noty, sel = ny, out = nyout);		//--> out: nyout
		
		// if (f==1)  set out = x + y  // integer 2's
		Add16(a = nxout, b = nyout, out = addout);				//---> out: 
		
		// if (f==0)  set out = x & y  // bitwise "and"
		And16(a = nxout, b = nyout, out = andout);				//---> out: andout
		
		//if(f==1) out = x + y    else out = x & y
		Mux16(a = andout, b = addout, sel = f, out = fout);		//---> out: fout
		
	
		
		// if (no==1) set out = ~out   // bitwise "not"
		Not16(in = fout, out = notfout);							
		Mux16(a = fout,  b = notfout, sel = no, out = out, out[0..7] = noout07, out[8..15] = noout815, out[15] = ng);
		
		// if (out==0) set zr = 1
		Or8Way(in=noout07, out=or07out);
		Or8Way(in=noout815, out=or815out);
		Or(a=or07out, b=or815out, out=orzrout);
		Mux(a = true, b = false, sel = orzrout , out = zr);
		
		// if (out<0) set ng = 1
		
			

		


			
			

	
		
}
