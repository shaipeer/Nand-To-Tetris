// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
	
	Not (in = instruction[15], out = Ainst);

    Or (a = Ainst, b = instruction[5], out = AinstCheck);									//check if the command is A instruction and set a register if does
	And (a = instruction[15], b = instruction[4], out = DinstCheck);						//check if D instraction inishiated
   
    Mux16 (a = ALUoutput, b = instruction, sel = Ainst, out = MUX1outout);					//check if to put in a the ALU output or Insruction
	
	ARegister (in = MUX1outout, load = AinstCheck, out = AregOutput, out[0..14]=addressM);	//set register A
	
	And (a = instruction[15], b = instruction[3], out = writeM);							//check if write to M

	Mux16 (a = AregOutput, b = inM, sel = instruction[12], out = MUX2outout);				// read from register A or M

	DRegister (in = ALUoutput, load = DinstCheck, out = DregOutput);						//set register D
	
	//COMP OP
	ALU (x   = DregOutput,      y  = MUX2outout,											//Operation between A/M and D
		 zx  = instruction[11], nx = instruction[10], zy = instruction[9],
		 ny  = instruction[8],  f  = instruction[7],  no = instruction[6],					//C1-C6 as ALU control bits
		 out = ALUoutput, out = outM, zr = ALUoutputZR, ng = ALUoutputNG);					//ALU Output

	Or (a = ALUoutputZR, b = ALUoutputNG, out = ALUoutputValidation);						//check ALU operation
	Not (in = ALUoutputValidation, out = GTZero);

	//JUMP OP
	And (a = instruction[0],  b = GTZero,	   out = jump0);								// >0
	And (a = instruction[1],  b = ALUoutputZR, out = jump1);								// =0
	And (a = instruction[2],  b = ALUoutputNG, out = jump2);								// <0	
	
	And (a = instruction[15], b = JUMPoutputOP, out = PCloadINST);							//	jump if C instruction	
	Or  (a = jump0, 		  b = jump1, 		out = JUMP0or1output);
	Or  (a = JUMP0or1output,  b = jump2, 		out = JUMPoutputOP);
	
    PC (in = AregOutput, load = PCloadINST, inc = true, reset = reset, out[0..14] = pc);
	
}
